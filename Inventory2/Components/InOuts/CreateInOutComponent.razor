@using Entities
@using Business
<h3>CreateInOutComponent</h3>

<div class="form-group">
    <select class="form-control" @onchange="OnchagedWarehouse">
        <option value="">
            Selecione una bodega...
        </option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
        }

    </select>
</div>
<hr />
<EditForm Model="oInOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
            <option value="">
                Selecione un producto...
            </option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }

        </InputSelect>
    </div>
    <div class="form-group">
        <label>Cantidad</label>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity">
        </InputNumber>
    </div>
    <div class="form-group">
        <label>¿Es una entrada?</label>
        <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput">
        </InputCheckbox>
    </div>
    <input class="form-group" type="button" value="@buttonValue" @onclick="SaveInOut" />
    <div class="container">
        <div class="row">
            <div class="alert alert-@alert mt-2" role="alert">
                @message
            </div>
        </div>
    </div>


</EditForm>


@code {
        //Si el obj oInOut.IsInput es verdadero aparece Registrar Entrada de lo contrario lo otro
        string buttonValue => oInOut.IsInput ? "Registrar Entrada" : "Registrar Salida";
        string message;
         string alert;
        InputOutputEntity oInOut = new InputOutputEntity();

        List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
        List<StorageEntity> storages = new List<StorageEntity>();
        ProductEntity oProduct = new ProductEntity();
        StorageEntity oStorage = new StorageEntity();



        protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WarehouseList();
    }

    private void OnchagedWarehouse(ChangeEventArgs e)
    {
        var idwarehouse = e.Value.ToString();
        storages = B_Storage.StorageProductsByWarehouse(idwarehouse);
    }

    private void SaveInOut()
    {
        //igualamos nustro obj a la lista de storages InputSelect de
        //Y decimos que temo el valor de oInOut.StorageId que se encuntra en la lista 
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        //De acuerdo al storaga se carga el producto
        //Y en esta parte ya se carga el producto
        oProduct = oStorage.Product;
        //Si es una entrada
        if(oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            B_Product.UpdateProduc(oProduct);
             message = $"El producto {oProduct.ProductName} ha sido actualizado";
            alert = "success";
        }
        else
        {
            if (IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                B_Product.UpdateProduc(oProduct);

                message = $"El producto {oProduct.ProductName} ha sido actualizado";
                alert = "success";

            }
            else
            {
                 message = $"No existe la cantidad suficnete en bodega para el producto {oProduct.ProductName}";
                alert = "danger";
            }

        }

    }

    private bool IsBiggerThanZero (int quantity, int storageQuantity)
    {
        if (storageQuantity>= quantity)
        {
            return true;
        }
        return false;
    }

}
